import pdb
from types import FrameType
from typing import Any, Callable, List, TypeVar, Union

F = TypeVar('F', bound=Callable[..., Any])

def _skip_windows(f: F) -> F: ...

class PdbDetach(pdb.Pdb):
    use_rawinput: bool = ...
    _precmd_handlers: List[Callable[[str], str]] = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    trace_dispatch: Any = ...
    def do_detach(self, arg: str) -> bool: ...
    def precmd(self, line: str) -> str: ...
    def attach_precmd_handler(self, handler: Callable[[str], str]) -> None: ...

def precmd_logger(line: str) -> str: ...

class _Handler(object):
    def __init__(self, port: int) -> None: ...
    def __call__(self, signum: int, frame: FrameType) -> None: ...
    def close(self) -> None: ...

def listen(port: Union[int, str]) -> None: ...
def unlisten() -> None: ...
